#pragma once

enum ControlPrameter {
    INITIAL_CAMERA, START_SIMULATION, ONE_FRAME, RESET_SIMULATION, STOP_AFTER_RELEASE_MOUSE, INITIAL_SIMULATION,
    SET_CURSOR_FORCE, OUTPUT_IMAGE, SAVE_OBJ, START_TEST, INITIAL_TEST, MOVE_OBJ_SCRIPT, MOVE_OBJ,ONLY_COLLISION_TEST, USE_XPBD,
    ONLY_MOVE_CURRENT_POSITION, DRAW_VT, ROTATION, ONLY_ROTATE_CURRENT, DRAW_SPATIAL_HASHING, SPATIAL_HASHING_UPDATE,
    USE_PD_, USE_NEWTON_, SHORTCUT_INSTRUCTION, SEARCH_LEFT_SH_CELL, SEARCH_RIGHT_SH_CELL, SHARP_EDGE_SHADING,
    DRAW_ALL_PAIRS_IN_A_CELL, SAVE_SIMULATION_DATA, SAVE_SCENE_DATA, USE_XPBD_LARGE, USE_XPBD_IPC
};

enum ObjectType {
    COLLIDER_, TETRAHEDRON_, CLOTH_
};

enum PDFuncSendToThread {
    LOCAL_PROJECTION, CONSTRUCT_B, UPDATE_UV, UPDATE_MATRIX, //LOCAL_EDGE_LENGTH_PROJECTION,
    COLLISION_FREE_POSITION, CONSTRUCT_B_WITHOUT_COLLISION,
    LOCAL_PROJECTION_WITHOUT_ENERGY, COMPUTE_ENERGY,
    SOLVE_WITH_COLLISION, SOLVE_WITHOUT_COLLISION, UPDATE_DIAGONAL,
    TEST_LOCAL_PROJECTION, COMPUTE_DISPLACEMENT,
    PREPARE_WOODBURY, SET_K_COLUMN, FACTORIZE_WOODBURY_K,
    UPDATE_COLLISION_STIFFNESS, VIRTUAL_LOCAL_PROJECTION, SOLVE_VIRTUAL_SYSYTEM, UPDATE_VIRTUAL_UV, UPDATE_U_FROM_VIRTUAL, GET_FRICTION
};
enum SpatialHashingFuncSendToThread {
    TRIANGLE_HASHING, SCENE_AABB, SH_FIND_ALL_TRIANGLE_PAIRS, TRIANGLE_HASHING_SMALLER_HASH_TABLE,
    FIND_ALL_PAIRS_HASH_TABLE, TRIANGLE_HASHING_RECORD_REAL_HASH_VALUE, PREFIX_SUM_MULTI_2,
    RECORD_NONEMPTY_CELL, TET_HASHING_SMALLER_HASH_TABLE, FIND_VERTEX_TET_PAIRS_HASH_TABLE, OBTAIN_PAIR_COUNT,
    SET_HASH_CELL_PAIR_NUM_PREFIX_SUM_TOGETHER, SET_PAIR_AVE, FIND_ALL_TRIANGLE_PAIRS_HASH_TABLE_ELEMENTWISE,
    ORI_TRIANGLE_HASHING, COMBINE_HASH_TABLE, FIND_ALL_PAIRS_HASH_TABLE_BY_ELEMENT
    //,  SET_HASH_TOGETHER, PREPARE_FOR_ACTUAL_HASH_VALUE_COUNT_THREAD, ADD_COUNT_FOR_PRIFIX_SUM
    //,PREFIX_SUM_THREAD_1, PREFIX_SUM_THREAD_2, MEMSET_PREFIX //, PREFIX_SUM_UP, PREFIX_SUM_DOWN
};

enum SceneFuc {
    TEST_ARRAY
};

enum CollisionFuncSendToThread {
    FIND_TRIANGLE_PAIRS, FIND_PRIMITIVE_AROUND,
    FIND_PATCH_PAIRS, FIND_VERTEX_VERTEX_VERTEX_EDGE_PAIRS,
    GLOBAL_COLLISION_TIME, COLLISION_CONSTRAINT, COLLISION_CONSTRAINT_IPC,
    COMPUTE_COLLISION_ENERGY,
    GLOBAL_COLLISION_DETECTION, SUM_TARGET_POSITION, RE_DETECTION, RESUM_TARGET_POSITION,
    RE_COLLISION_CONSTRAINT, RE_COLLISION_CONSTRAINT_IPC, FIND_COLLISION_PAIR, COMPUTE_VOLUME,
    PREFIX_SUM_ALL_PAIRS, UPDATE_COLLISION_HESSIAN_COLOR, COLOR_COLLISION_TIME, UPDATE_COLOR_POSITION, SET_ELEMENT_COLLIDE_WITH_COLLIDER,
    RECORD_VT_PAIR_COMPRESS, RECORD_EE_PAIR_COMPRESS, RECORD_TRIANGLE_HAS_COLLISION_PAIR, CLOSE_PAIR_COLLISION_TIME
};

enum MeshStructFuncSendToThread {
    FACE_NORMAL, VERTEX_NORMAL, FACE_NORMAL_RENDER, VERTEX_NORMAL_RENDER, SET_VOLUME, VERTEX_NORMAL_FROM_RENDER, TET_NEIGHBOR_TET_VERTEX_INDEX,
    SORT_TRIANGLE_EDGE_AROUND_TRIANGLE_EDGE, SORT_TRIANGLE_AROUND_VERTEX_EDGE, TET_AROUND_TET_COLOR_GROUP
};
enum MeshStructType {
    TRIANGLE, TETRAHEDRON
};

enum Iteration {
    LOCAL_GLOBAL, OUTER
};

enum StiffnessType {
    BODY_POINT_TRIANGLE, SELF_POINT_TRIANGLE, SELF_EDGE_EDGE, SELF_POINT_POINT, LENGTH, BENDING, ARAP,
    TET_EDGE_LENGTH, DAMP_STIFFNESS, RAYLEIGH_DAMP_STIFFNESS_ALPHA, RAYLEIGH_DAMP_STIFFNESS_BETA,
    DAMP_BODY_POINT_TRIANGLE, DAMP_SELF_POINT_TRIANGLE, DAMP_SELF_EDGE_EDGE, DAMP_SELF_POINT_POINT,
    DAMP_LENGTH, DAMP_BENDING, DAMP_ARAP
};

enum ToleranceType {
    BODY_PT, SELF_PT, SELF_EE, SELF_PP, AABB_BODY_PT, AABB_SELF_PT, AABB_SELF_EE
};

enum SetStiffness {
    START_SETTING, STIFFNESS_CONFIRMED, EDIT, EDIT_LENGTH, EDIT_BENDING, EDIT_ARAP, EDIT_COLLISION, EDIT_BODY_POINT_TRIANGLE, EDIT_SELF_POINT_TRIANGLE, EDIT_SELF_EDGE_EDGE, EDIT_SELF_POINT_POINT,
    EDIT_DAMP_STIFFNESS, EDIT_TET_EDGE_LENGTH
};

enum ObjectFunc {
    VERTEX_AABB, EDGE_TRIANGLE_AABB, VERTEX_AABB_WITHOUT_TOLERANCE, TETRAHEDRON_AABB, CURRENT_AABB, FIND_NEIGHBOR_VERTEX
};

enum BVHFunc {
    CAL_CENTER, CAL_MORTON, UPDATE_NODE_VALUE, UPDATE_LAST_LAYER_NODE_VALUE
};

enum RadixSortFunc {
    SET_COUNT_BUCKET, REORDER, MORTON_REORDER, SET_COUNT_BUCKET_MORTON, COPY_ARRAY
};

enum IterationMethodFunc {
    JACOBI_ITR, A_JACOBI_2_ITR, A_JACOBI_3_ITR, CHEBYSHEV_JACOBI_ITR, CHEBYSHEV_A_JACOBI_2_ITR,
    CHEBYSHEV_A_JACOBI_3_ITR, PCG_ITR1, PCG_ITR2, GAUSS_SEIDEL_ITR, CHEBYSHEV_GAUSS_SEIDEL_ITR,
    UPDATE_JACOBI_OPERATOR, UPDATE_2_A_JACOBI_ITR_MATRIX, UPDATE_3_A_JACOBI_ITR_MATRIX, R_MULTIPLY_X_PLUS_B, COMPUTE_RESIDUAL,
    ESTIMATE_A_JACOBI_2_EIGEN_VALUE, ESTIMATE_A_JACOBI_3_EIGEN_VALUE, CHEBYSHEV_A_JACOBI_ITERATION, W_R_MULTIPLY_X_PLUS_B_1_W_X
};


enum ItrSolverMethod {
    DIRECT_SOLVE, JACOBI, CHEBYSHEV_JACOBI, A_JACOBI, CHEBYSHEV_A_JACOBI, GAUSS_SEIDEL, PCG, GAUSS_SEIDEL_CHEBYSHEV, WEIGHTED_JACOBI,
};

enum MeshPatchFunc {
    FIND_VERTEX, PATCH_AABB, DECIDE_TRIANGLE_INDEX_SIZE, FIND_TRIANGLE_INDEX
};

enum DrawCullingFunc {
    SET_POSITION_COLOR, SET_DATA_TOGETHER
};

enum MoveObjectFunc {
    MOVE_OBJECT, MOVE_OBJECT2, ROTATE_AROUND_AXIS
};

enum CollisionIndicateType {
    VERTEX_EDGE, VERTEX_COLLIDER_EDGE_OBJ, VERTEX_OBJ_EDGE_COLLIDER,VERTEX_VERTEX, VERTEX_VERTEX_COLLIDER, 
};

enum XPBDFunc {
    SET_POS_PREDICT, SET_POS_PREDICT_SUB_TIME_STEP, XPBD_VELOCITY, SET_POS_PREDICT_SUB_TIME_STEP_FOR_CULLING
};

enum XPBD_IPC_Func {
    SET_POS_PREDICT_, COLLISION_FREE_POSITION_, XPBD_IPC_VELOCITY, SOLVE_TET_BLOCK, UPDATE_TET_HESSIAN, UPDATE_TET_GRAD_SHARED, UPDATE_TET_GRAD_SHARED_COLLISION,
    SOLVE_TET_BLOCK_COLLISION, UPDATE_TET_GRAD_SHARED_COLLISION_NEIGHBOR, UPDATE_POSITION_AVERAGE, COLLISION_FREE_POSITION_LAST_COLOR
};


enum NewtonMethodFunc {
    SET_MASS_SPRING, SET_HESSIAN_DIAGONAL, GET_COEFF_ADDRESS, UPDATE_HESSIAN_FIXED_STRUCTURE, UPDATE_DIAGONAL_HESSIAN_FIXED_STRUCTURE,
    UPDATE_INTERNAL_FORCE, SUM_B, SET_S_N, UPDATE_POSITION_NEWTON, UPDATE_ANCHOR_POINT_HESSIAN, VELOCITY_NEWTON,
    VELOCITY_NEWTON_2, UPDATE_DAMP, NEWTON_METHOD_ENERGY, UPDATE_POSITION_NEWTON_FROM_ORI, SET_B_N, UPDATEVELOCITY_ACCELERATION_NEWMARK,
    UPDATE_DIAGONAL_HESSIAN_FIXED_STRUCTURE_INITIAL_STIFFNESS
};

enum MethodFunc {
    PD_, XPBD_, NEWTON_, XPBD_SECOND_ORDER_LARGE_,XPBD_IPC_
};